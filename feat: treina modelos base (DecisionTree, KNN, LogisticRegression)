{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMV9qZvmun5qTDl+pP7BPa2",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/laurastj/Tarefa2_IA/blob/main/feat%3A%20treina%20modelos%20base%20(DecisionTree%2C%20KNN%2C%20LogisticRegression)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##**Atividade de Inteligência Artificial**"
      ],
      "metadata": {
        "id": "x8hPMdg9-Cx7"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "6pE5yUJh-Z8D"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Bio_EDW25Hv_",
        "outputId": "6fa820cf-7d97-472e-b1b9-ee4d24b10f29"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Imports ok, pasta outputs criada (se não existir).\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import os\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
        "\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "\n",
        "from sklearn.metrics import accuracy_score, classification_report, ConfusionMatrixDisplay\n",
        "\n",
        "os.makedirs('outputs', exist_ok=True)\n",
        "print('Imports ok, pasta outputs criada (se não existir).')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Carregar dataset (DataScienceDojo mirror)\n",
        "url = \"https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv\"\n",
        "df = pd.read_csv(url)\n",
        "print('Dataset carregado. Linhas:', df.shape[0], 'Colunas:', df.shape[1])\n",
        "df.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 521
        },
        "id": "fv83JvEc6Jcu",
        "outputId": "7cfc0f7e-c855-41c5-ad00-0a298ced5114"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset carregado. Linhas: 891 Colunas: 12\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   PassengerId  Survived  Pclass  \\\n",
              "0            1         0       3   \n",
              "1            2         1       1   \n",
              "2            3         1       3   \n",
              "3            4         1       1   \n",
              "4            5         0       3   \n",
              "\n",
              "                                                Name     Sex   Age  SibSp  \\\n",
              "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
              "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
              "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
              "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
              "4                           Allen, Mr. William Henry    male  35.0      0   \n",
              "\n",
              "   Parch            Ticket     Fare Cabin Embarked  \n",
              "0      0         A/5 21171   7.2500   NaN        S  \n",
              "1      0          PC 17599  71.2833   C85        C  \n",
              "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
              "3      0            113803  53.1000  C123        S  \n",
              "4      0            373450   8.0500   NaN        S  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3e2e866e-b097-4534-b7d8-fe43a149aafb\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Braund, Mr. Owen Harris</td>\n",
              "      <td>male</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
              "      <td>female</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C85</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Heikkinen, Miss. Laina</td>\n",
              "      <td>female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>C123</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Allen, Mr. William Henry</td>\n",
              "      <td>male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3e2e866e-b097-4534-b7d8-fe43a149aafb')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3e2e866e-b097-4534-b7d8-fe43a149aafb button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3e2e866e-b097-4534-b7d8-fe43a149aafb');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-77bcc3ed-1de2-4603-995c-9f330c670618\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-77bcc3ed-1de2-4603-995c-9f330c670618')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-77bcc3ed-1de2-4603-995c-9f330c670618 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 891,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 257,\n        \"min\": 1,\n        \"max\": 891,\n        \"num_unique_values\": 891,\n        \"samples\": [\n          710,\n          440,\n          841\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 891,\n        \"samples\": [\n          \"Moubarek, Master. Halim Gonios (\\\"William George\\\")\",\n          \"Kvillner, Mr. Johan Henrik Johannesson\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.526497332334044,\n        \"min\": 0.42,\n        \"max\": 80.0,\n        \"num_unique_values\": 88,\n        \"samples\": [\n          0.75,\n          22.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 681,\n        \"samples\": [\n          \"11774\",\n          \"248740\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49.693428597180905,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          11.2417,\n          51.8625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cabin\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 147,\n        \"samples\": [\n          \"D45\",\n          \"B49\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"S\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('\\nINFO:')\n",
        "print(df.info())\n",
        "print('\\nNulos por coluna:')\n",
        "print(df.isnull().sum())\n",
        "print('\\nDistribuição do target (Survived):')\n",
        "print(df['Survived'].value_counts(normalize=True))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bG8ET5FZ6uLt",
        "outputId": "883e6ea6-c5a9-4c1a-c67c-a7348c1a697c"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "INFO:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 891 entries, 0 to 890\n",
            "Data columns (total 12 columns):\n",
            " #   Column       Non-Null Count  Dtype  \n",
            "---  ------       --------------  -----  \n",
            " 0   PassengerId  891 non-null    int64  \n",
            " 1   Survived     891 non-null    int64  \n",
            " 2   Pclass       891 non-null    int64  \n",
            " 3   Name         891 non-null    object \n",
            " 4   Sex          891 non-null    object \n",
            " 5   Age          714 non-null    float64\n",
            " 6   SibSp        891 non-null    int64  \n",
            " 7   Parch        891 non-null    int64  \n",
            " 8   Ticket       891 non-null    object \n",
            " 9   Fare         891 non-null    float64\n",
            " 10  Cabin        204 non-null    object \n",
            " 11  Embarked     889 non-null    object \n",
            "dtypes: float64(2), int64(5), object(5)\n",
            "memory usage: 83.7+ KB\n",
            "None\n",
            "\n",
            "Nulos por coluna:\n",
            "PassengerId      0\n",
            "Survived         0\n",
            "Pclass           0\n",
            "Name             0\n",
            "Sex              0\n",
            "Age            177\n",
            "SibSp            0\n",
            "Parch            0\n",
            "Ticket           0\n",
            "Fare             0\n",
            "Cabin          687\n",
            "Embarked         2\n",
            "dtype: int64\n",
            "\n",
            "Distribuição do target (Survived):\n",
            "Survived\n",
            "0    0.616162\n",
            "1    0.383838\n",
            "Name: proportion, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Seleção de features"
      ],
      "metadata": {
        "id": "G-nDo3_C7PWc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X = df[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']].copy()\n",
        "y = df['Survived'].copy()\n",
        "\n",
        "num_cols = ['Age', 'SibSp', 'Parch', 'Fare']\n",
        "cat_cols = ['Pclass', 'Sex', 'Embarked']\n",
        "\n",
        "print('Número de features numéricas:', len(num_cols), 'e categóricas:', len(cat_cols))\n",
        "X.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 224
        },
        "collapsed": true,
        "id": "8xjWa6JC7St2",
        "outputId": "b9e876ff-db96-4e8d-834c-cbe6200bc1a7"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Número de features numéricas: 4 e categóricas: 3\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Pclass     Sex   Age  SibSp  Parch     Fare Embarked\n",
              "0       3    male  22.0      1      0   7.2500        S\n",
              "1       1  female  38.0      1      0  71.2833        C\n",
              "2       3  female  26.0      0      0   7.9250        S\n",
              "3       1  female  35.0      1      0  53.1000        S\n",
              "4       3    male  35.0      0      0   8.0500        S"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c800d47d-4650-4b28-934f-69b5cb510065\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3</td>\n",
              "      <td>male</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>female</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3</td>\n",
              "      <td>male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c800d47d-4650-4b28-934f-69b5cb510065')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c800d47d-4650-4b28-934f-69b5cb510065 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c800d47d-4650-4b28-934f-69b5cb510065');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-40cf5e4e-5e76-4f76-81a5-f4372d4d0cfe\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-40cf5e4e-5e76-4f76-81a5-f4372d4d0cfe')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-40cf5e4e-5e76-4f76-81a5-f4372d4d0cfe button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "X",
              "summary": "{\n  \"name\": \"X\",\n  \"rows\": 891,\n  \"fields\": [\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.526497332334044,\n        \"min\": 0.42,\n        \"max\": 80.0,\n        \"num_unique_values\": 88,\n        \"samples\": [\n          0.75,\n          22.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49.693428597180905,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          11.2417,\n          51.8625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"S\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num_pipeline = Pipeline([\n",
        "    ('imputer', SimpleImputer(strategy='median')),\n",
        "    ('scaler', StandardScaler())\n",
        "])\n",
        "\n",
        "cat_pipeline = Pipeline([\n",
        "    ('imputer', SimpleImputer(strategy='most_frequent')),\n",
        "    ('onehot', OneHotEncoder(handle_unknown='ignore', sparse_output=False))\n",
        "])\n",
        "\n",
        "preprocessor = ColumnTransformer([\n",
        "    ('num', num_pipeline, num_cols),\n",
        "    ('cat', cat_pipeline, cat_cols)\n",
        "])\n",
        "\n",
        "print('Preprocessor configurado.')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xORR5UE_7jBN",
        "outputId": "647f3312-bf47-4f4e-c44b-c99d5d9d36e8"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Preprocessor configurado.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X, y, test_size=0.2, stratify=y, random_state=42\n",
        ")\n",
        "print('Split realizado. Treino:', X_train.shape[0], 'Teste:', X_test.shape[0])\n",
        "\n",
        "models = {\n",
        "    'Decision Tree': DecisionTreeClassifier(random_state=42),\n",
        "    'KNN': KNeighborsClassifier(),\n",
        "    'Logistic Regression': LogisticRegression(max_iter=1000, random_state=42)\n",
        "}\n",
        "\n",
        "results = {}\n",
        "for name, clf in models.items():\n",
        "    pipe = Pipeline([('preprocessor', preprocessor), ('clf', clf)])\n",
        "    pipe.fit(X_train, y_train)\n",
        "    y_pred = pipe.predict(X_test)\n",
        "    acc = accuracy_score(y_test, y_pred)\n",
        "    results[name] = {'accuracy': acc, 'y_pred': y_pred, 'pipeline': pipe}\n",
        "    print(f'== {name} ==')\n",
        "    print('Acurácia:', acc)\n",
        "    print(classification_report(y_test, y_pred))\n",
        "    disp = ConfusionMatrixDisplay.from_estimator(pipe, X_test, y_test)\n",
        "    disp.figure_.suptitle(f'Matriz de confusão - {name}')\n",
        "    plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "collapsed": true,
        "id": "DU-lAq4g7n2R",
        "outputId": "2d1c400a-2055-43ed-bdae-2830b53c6da7"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Split realizado. Treino: 712 Teste: 179\n",
            "== Decision Tree ==\n",
            "Acurácia: 0.8044692737430168\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.83      0.86      0.84       110\n",
            "           1       0.77      0.71      0.74        69\n",
            "\n",
            "    accuracy                           0.80       179\n",
            "   macro avg       0.80      0.79      0.79       179\n",
            "weighted avg       0.80      0.80      0.80       179\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "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idr9Xl5eorCwUHvMunXrROPGjYVGo9GWFRYWCicnJ7F3714hhBDe3t5i/vz52v3FxcWifv362raEEKJLly7i7bffFkIIkZqaKgCIffv2lRvnDz/8IACI27dva8sKCgpErVq1xNGjR3XqDh8+XAwcOFAIIcTUqVNF06ZNdfa/8847Zc71bwDE9u3bK9z/0UcfiZCQEO3rGTNmCHt7e3HlyhVt2ffffy/s7OzE9evXhRBCNGzYUGzYsEHnPHPmzBFhYWFCCCHS0tIEAPHLL79U2C4RVR7nyKnG2r17N1xcXFBcXAyNRoNBgwZh5syZ2v0tWrTQmRc/c+YMzp8/D1dXV53zFBQU4MKFC8jJycH169d1nsHu4OCAtm3blhleL3X69GnY29ujS5cuesd9/vx53L17Fz169NApLyoqQps2bQAAKSkpZZ4FHxYWpncbpb766ivExcXhwoULyMvLQ0lJCRQKhU4dPz8/1KtXT6cdjUaD1NRUuLq64sKFCxg+fDhGjhyprVNSUgKlUmlwPERkOCZyqrG6deuGZcuWQSqVwsfHBw4Our/uzs7OOq/z8vIQEhKC9evXlzlXnTp1KhWDk5OTwcfk5eUBAL799ludBArcn/c3laSkJAwePBizZs1CREQElEolNm3ahE8++cTgWD///PMyXyzs7e1NFisRVYyJnGosZ2dnBAUF6V3/8ccfx1dffYW6deuW6ZWW8vb2xvHjx9G5c2cA93ueycnJePzxx8ut36JFC2g0Ghw6dAjh4eFl9peOCKjVam1Z06ZNIZPJcPny5Qp78k2aNNEu3Ct17NixR7/JBxw9ehT+/v549913tWWXLl0qU+/y5cu4du0afHx8tO3Y2dmhcePG8PLygo+PD/7++28MHjzYoPaJyDS42I3ovwYPHozatWujb9++OHz4MNLS0nDw4EGMHTsWV65cAQC8/fbb+OCDD7Bjxw6cPXsWb7311kOvAQ8ICEBUVBSGDRuGHTt2aM+5efNmAIC/vz8kEgl2796NGzduIC8vD66urpg4cSJiYmKwZs0aXLhwAadOncKnn36qXUD25ptv4ty5c5g0aRJSU1OxYcMGrF692qD326hRI1y+fBmbNm3ChQsXEBcXV+7CPblcjqioKJw5cwaHDx/G2LFjMWDAAKhUKgDArFmzEBsbi7i4OPz111/47bffkJCQgAULFhgUDxFVDhM50X/VqlULP/74I/z8/NC/f380adIEw4cPR0FBgbaHPmHCBLz66quIiopCWFgYXF1d8fzzzz/0vMuWLcMLL7yAt956C8HBwRg5ciTy8/MBAPXq1cOsWbMwZcoUeHl5YfTo0QCAOXPmYNq0aYiNjUWTJk3w9NNP49tvv0VgYCCA+/PW27Ztw44dO9CqVSssX74c8+bNM+j99unTBzExMRg9ejRat26No0ePYtq0aWXqBQUFoX///njmmWfQs2dPtGzZUufyshEjRuCLL75AQkICWrRogS5dumD16tXaWInIvCSiolU6REREVO2xR05ERGTFmMiJiIisGBM5ERGRFWMiJyIismJM5ERERFaMiZyIiMiKMZETERFZMSZyIiIiK8ZETkREZMWYyImIiKwYEzkREZEV+3+7d4ZaIFgoYQAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "== KNN ==\n",
            "Acurácia: 0.8212290502793296\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.82      0.90      0.86       110\n",
            "           1       0.81      0.70      0.75        69\n",
            "\n",
            "    accuracy                           0.82       179\n",
            "   macro avg       0.82      0.80      0.81       179\n",
            "weighted avg       0.82      0.82      0.82       179\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "== Logistic Regression ==\n",
            "Acurácia: 0.8044692737430168\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.81      0.89      0.85       110\n",
            "           1       0.79      0.67      0.72        69\n",
            "\n",
            "    accuracy                           0.80       179\n",
            "   macro avg       0.80      0.78      0.79       179\n",
            "weighted avg       0.80      0.80      0.80       179\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "Xz1e-0KN965l"
      }
    }
  ]
}